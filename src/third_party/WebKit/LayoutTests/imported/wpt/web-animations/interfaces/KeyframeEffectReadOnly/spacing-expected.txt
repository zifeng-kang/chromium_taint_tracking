This is a testharness.js-based test.
FAIL Test throwing TypeError if using empty string assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: '' });
  }" did not throw
FAIL Test throwing TypeError if not using the correct keyword assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'dist' });
  }" did not throw
FAIL Test throwing TypeError if adding leading spaces assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: ' paced(margin-left)' });
  }" did not throw
FAIL Test throwing TypeError if adding trailing spaces assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(margin-left) ' });
  }" did not throw
FAIL Test throwing TypeError if adding leading spaces before the paced property assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced( margin-left)' });
  }" did not throw
FAIL Test throwing TypeError if adding trailing spaces after the paced property assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(margin-left )' });
  }" did not throw
FAIL Test throwing TypeError if these is no paced property assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced()' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(.margin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(1margin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with an invalid escape assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(\\)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with an invalid escape (FF) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(\\\fmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with an invalid escape (CR) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(\\\rmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with an invalid escape (LF) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(\\\nmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with a leading minus and an invalid name-start code point assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(- )' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with a leading minus and an invalid escape assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(-\\)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with a leading minus and an invalid escape (FF) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(-\\\fmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with a leading minus and an invalid escape (CR) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(-\\\rmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident started string with a leading minus and an invalid escape (LF) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(-\\\nmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident string with an invalid escape assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(--\\)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident string with an invalid escape (FF) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(--\\\fmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident string with an invalid escape (CR) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(--\\\rmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident string with an invalid escape (LF) assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(--\\\nmargin)' });
  }" did not throw
FAIL Test throwing TypeError if using a non-ident string with an invalid name code point assert_throws: function "function () {
    createDiv(t).animate(null, { spacing: 'paced(margin.left)' });
  }" did not throw
FAIL Test falling back to distribute spacing if using a unrecognized property assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using a unrecognized property which starts with a valid escape (Full stop) assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using a unrecognized property which starts with a valid escape (white space) assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using a unrecognized property which starts with a valid escape (low line) assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using a unrecognized property which starts with a minus and a low line assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using a unrecognized property which starts with a minus and a valid escape assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using CSS variables assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using a non-animatable shorthand property assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test falling back to distribute spacing if using a non-animatable property assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test default value of spacing assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test spacing value if setting distribute assert_equals: spacing mode expected (string) "distribute" but got (undefined) undefined
FAIL Test spacing value if setting paced assert_equals: spacing mode expected (string) "paced(margin-left)" but got (undefined) undefined
Harness: the test ran to completion.

